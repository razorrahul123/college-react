{"version":3,"sources":["college_02.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","CollegeCard","college","className","promoted","tags","map","item","key","rating","rating_remarks","ranking","alt","src","image","college_name","nearest_place","famous_nearest_places","offertext","original_fees","discounted_fees","fees_cycle","amenties","App","useState","currentList","setCurrentList","hasMore","setHasMore","currentLength","setCurrentLength","useEffect","colleges","length","slice","prev","observer","useRef","lastElementRef","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","observe","id","index","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.273556e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/college_02.619ee97e.jpg\";","import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport \"./App.css\";\nimport college from \"./colleges.json\";\nimport image from \"./college_02.jpg\";\n\nconst CollegeCard = ({ college }) => (\n  <div className=\"card-container\">\n    <div className=\"img\">\n      {college.promoted ? (\n        <div className=\"promoted-container\">\n          <span>PROMOTED</span>\n        </div>\n      ) : null}\n      <div className=\"tags-container\">\n        {college.tags.map((item) => (\n          <span key={item}>{item}</span>\n        ))}\n      </div>\n      <div className=\"rating-container\">\n        <span>{college.rating} / 5</span>\n        <span>{college.rating_remarks}</span>\n      </div>\n      <div className=\"ranking-container\">\n        <span># {college.ranking}</span>\n      </div>\n      <div className=\"img-container\">\n        <img alt=\"college\" src={image} />\n      </div>\n    </div>\n    <div className=\"info-container\">\n      <div className=\"info-left-wrapper\">\n        <div className=\"info-left\">\n          <p className=\"title\">{college.college_name}</p>\n          <div className=\"near-container\">\n            {college.nearest_place.map((item) => (\n              <span key={item}>{item} &nbsp;</span>\n            ))}\n          </div>\n          <div>\n            <span className=\"match-container\">\n              93% Match : {college.famous_nearest_places}\n            </span>\n          </div>\n        </div>\n        <div className=\"offer-container\">{college.offertext}</div>\n      </div>\n      <div className=\"info-right\">\n        <div className=\"discount-container\">\n          <span className=\"original-fees-container\">\n            &#8377; {college.original_fees}\n          </span>\n          <span className=\"percent-containter\">20</span>\n        </div>\n        <span className=\"discount-fees-container\">\n          {\" \"}\n          &#8377; {college.discounted_fees}\n        </span>\n        <span className=\"fee-cycle-container\">{college.fees_cycle}</span>\n        <ul className=\"amenities-container\">\n          {college.amenties.map((item) => (\n            <li key={item}>{item}</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  </div>\n);\n\nfunction App() {\n  const [currentList, setCurrentList] = useState([]);\n  const [hasMore, setHasMore] = useState(false);\n  const [currentLength, setCurrentLength] = useState(0);\n\n  useEffect(() => {\n    if (college.colleges && college.colleges.length > 0) {\n      if (college.colleges.length < 10) {\n        setCurrentList(college.colleges);\n        setCurrentLength(college.colleges.length);\n        setHasMore(false);\n      } else {\n        setCurrentList(college.colleges.slice(0, 10));\n        setHasMore(true);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    if (currentLength > 0) {\n      setCurrentList((prev) => {\n        return [\n          ...prev,\n          ...college.colleges.slice(currentLength, currentLength + 10),\n        ];\n      });\n      if (currentLength >= college.colleges.length) {\n        setHasMore(false);\n      }\n    }\n  }, [currentLength]);\n\n  const observer = useRef();\n  const lastElementRef = useCallback(\n    (node) => {\n      if (observer.current) observer.current.disconnect();\n      observer.current = new IntersectionObserver((entries) => {\n        if (entries[0].isIntersecting && hasMore) {\n          setCurrentLength((prev) => prev + 10);\n        }\n      });\n      if (node) observer.current.observe(node);\n    },\n    [hasMore]\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"root-div\">\n        <section>Colleges in North India</section>\n        <div id=\"infinite-scroll-list\" className=\"infinite-scroll-list\">\n          {currentList\n            ? currentList.map((college, index) => {\n                if (currentList.length === index + 1) {\n                  return (\n                    <div ref={lastElementRef} key={college.college_name}>\n                      <CollegeCard\n                        key={college.college_name}\n                        college={college}\n                      />\n                    </div>\n                  );\n                } else {\n                  return (\n                    <div key={college.college_name}>\n                      <CollegeCard\n                        key={college.college_name}\n                        college={college}\n                      />\n                    </div>\n                  );\n                }\n              })\n            : null}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}